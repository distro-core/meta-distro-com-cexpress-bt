# SPDX-License-Identifier: MIT

name: Self Hosted Build

run-name: '${{ github.event_name }} on ${{ github.ref_name && github.ref_name || github.ref }} : ${{ github.workflow }}'

# This workflow represents a specific configuration for a
# single MACHINE as a specific design goal. It utilizes a
# reusable workflow found at distro-core.

# Secrets
# secrets.ACTIONS_STEP_DEBUG                Repository
# secrets.AWS_ACCESS_KEY_ID                 Organization, S3 Access Key
# secrets.AWS_SECRET_ACCESS_KEY             Organization, S3 Secret Key
# secrets.AWS_ENDPOINT_URL                  Organization, S3 Endpoint Hostname

# Self hosted runners have the prerequsite dependency to
# install the host tools dependencies before workflow use.

on:
  # push:
  #   branches:
  #   - main
  #   - release
  #   - development
  #   tags:
  #   - v0.**
  workflow_dispatch:
    inputs:
      chosen_os:
        description: Select OS
        type: choice
        default: linux-amd64
        options:
        - linux-amd64
        - linux-arm64
        - ubuntu-24.04
      EXTRA_USER_CLASSES:
        description: >-
          USER_CLASSES:prepend
        type: choice
        default: none
        options:
        - none
        - cve-check

concurrency:
  group: ${{ github.workflow_ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'release/') }}

# workflow permissions for current repository

permissions:
  actions: write
  attestations: write
  contents: write
  id-token: write

########################################################################

# DISTRO:
#   required: true
#   description: >-
#     bitbake variable DISTRO
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-DISTRO
# DISTRO_CODENAME:
#   required: true
#   description: >-
#     bitbake variable DISTRO_CODENAME
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-DISTRO_CODENAME
# MACHINE:
#   required: true
#   description: >-
#     bitbake variable MACHINE
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-MACHINE
# TARGETS:
#   required: true
#   description: >-
#     bitbake command line targets_list
# EXTRA_PREMIRRORS:
#   required: false
#   description: >-
#     bitbake variable PREMIRRORS:prepend
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-PREMIRRORS
# EXTRA_SSTATE_MIRRORS:
#   required: false
#   description: >-
#     bitbake variable SSTATE_MIRRORS:prepend
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-SSTATE_MIRRORS

env:
  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}
  REPO_MANIFEST_URL: https://github.com/distro-core/distro-manifest.git
  REPO_MANIFEST_NAME: gh-${{ github.ref_name }}-head.xml
  REPO_MANIFEST_REF: main
  REPO_MANIFEST_LOCAL: >-
    <extend-project name="meta-tegra" revision="scarthgap-l4t-r35.x" />
    <extend-project name="meta-distro" revision="${{ github.ref_name }}" />
    <extend-project name="workflows-com-cexpress-bt" revision="${{ github.ref_name }}" groups="default" />
  DISTRO: distro-core
  DISTRO_CODENAME: scarthgap
  MACHINE: com-cexpress-bt
  TARGETS: distro-image
  TARGETS_FLAGS:
  EXTRA_TARGETS_FLAGS:
  EXTRA_USER_CLASSES: none
  MNT_DL_DIR: /mnt/downloads
  MNT_SSTATE_DIR: /mnt/sstate-cache
  # replaces inherit own-mirrors
  EXTRA_PREMIRRORS: >-
    cvs://.*/.* file:///mnt/downloads
    svn://.*/.* file:///mnt/downloads
    git://.*/.* file:///mnt/downloads
    gitsm://.*/.* file:///mnt/downloads
    bzr://.*/.*  file:///mnt/downloads
    p4://.*/.* file:///mnt/downloads
    osc://.*/.* file:///mnt/downloads
    https?://.*/.* file:///mnt/downloads
    ftp://.*/.* file:///mnt/downloads
    npm://.*/?.* file:///mnt/downloads
    s3://.*/.* file:///mnt/downloads
    crate://.*/.* file:///mnt/downloads
    gs://.*/. file:///mnt/downloads
    ${{ format('cvs://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('svn://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('git://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('gitsm://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('bzr://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('p4://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('osc://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('https?://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('ftp://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('npm://.*/?.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('s3://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('crate://.*/.* {0}', secrets.BITBAKE_PREMIRROR_URL) }}
    ${{ format('gs://.*/. {0}', secrets.BITBAKE_PREMIRROR_URL) }}
  EXTRA_SSTATE_MIRRORS: >-
    file://.* file:///mnt/sstate-cache/PATH
    ${{ format('file://.* {0}/PATH', secrets.BITBAKE_SSTATE_MIRROR_URL) }}

########################################################################

jobs:

  Run:
    runs-on: [ self-hosted, "${{ inputs.chosen_os && inputs.chosen_os || 'ubuntu-24.04' }}" ]
    timeout-minutes: 1080
    steps:

    # checkout repo for workflow automation.

    - id: checkout
      uses: actions/checkout@v4
      with:
        clean: false
        fetch-depth: 1

    # setup runner.

    - id: runner
      if: env.DISTRO != '' && env.MACHINE != ''
      uses: distro-core/actions/runner@main
      with:
        mnt_dl_dir: ${{ env.MNT_DL_DIR }}
        mnt_sstate_dir: ${{ env.MNT_SSTATE_DIR }}

    # keep-alive prevents the workflow from being disabled due to any
    # github repository inactivity.

    - id: keepalive
      uses: distro-core/actions/keepalive@main

    # contexts reports in the summary log contents of contexts.

    - id: context
      if: env.ACTIONS_STEP_DEBUG
      uses: distro-core/actions/context@main

    # repo init, sync and manifest; the job creates the workspace
    # contents and the .repo directory that are referenced in later.
    # environment variables are set for the manifest and the repo.

    - id: repo-manifest
      uses: distro-core/actions/repo@main

    # restore caches.

    # - id: restore-build-cache
    #   uses: actions/cache/restore@v4
    #   with:
    #     key: build-cache
    #     path: |
    #       build/cache

    # - id: restore-build-downloads
    #   uses: actions/cache/restore@v4
    #   with:
    #     key: build-downloads
    #     path: |
    #       build/downloads

    # - id: restore-build-sstate
    #   uses: actions/cache/restore@v4
    #   with:
    #     key: build-sstate
    #     path: |
    #       build/sstate-cache

    # build steps to create artifacts.

    # - id: bitbake-sdk
    #   uses: distro-core/actions/bitbake@main

    - id: bitbake-targets
      uses: distro-core/actions/bitbake@main

    # sync artifacts to S3 storage.

    - id: s3cmd-dl-dir
      if: steps.bitbake-targets.outputs.dl_dir != ''
      uses: distro-core/actions/s3cmd@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.dl_dir }}
        dst_dir: s3://distro-core-downloads
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - id: s3cmd-sstate-dir
      if: steps.bitbake-targets.outputs.sstate_dir != ''
      uses: distro-core/actions/s3cmd@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.sstate_dir }}
        dst_dir: s3://distro-core-sstate-cache
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # sync shared artifacts to local storage

    - id: rsync-dl-dir
      if: steps.runner.outputs.mnt_dl_dir != ''
      uses: distro-core/actions/rsync@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.dl_dir }}
        dst_dir: ${{ steps.runner.outputs.mnt_dl_dir }}

    - id: rsync-sstate-dir
      if: steps.runner.outputs.mnt_sstate_dir != ''
      uses: distro-core/actions/rsync@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.sstate_dir }}
        dst_dir: ${{ steps.runner.outputs.mnt_sstate_dir }}

    # refresh caches.

    # - id: save-build-cache
    #   if: always()
    #   uses: actions/cache/save@v4
    #   with:
    #     key: build-cache
    #     path: |
    #       ${{ steps.bitbake-targets.outputs.cache }}/*
    #       !${{ steps.bitbake-targets.outputs.cache }}/bb_cache*
    #       !${{ steps.bitbake-targets.outputs.cache }}/bb_codeparser*

    # - id: save-build-downloads
    #   if: always()
    #   uses: actions/cache/save@v4
    #   with:
    #     key: build-downloads
    #     path: |
    #       ${{ steps.bitbake-targets.outputs.dl_dir }}/*
    #       !${{ steps.bitbake-targets.outputs.dl_dir }}/git2
    #       !${{ steps.bitbake-targets.outputs.dl_dir }}/*.done
    #       !${{ steps.bitbake-targets.outputs.dl_dir }}/*.lock
    #       !${{ steps.bitbake-targets.outputs.dl_dir }}/*tmp
    #       !${{ steps.bitbake-targets.outputs.dl_dir }}/tmp*

    # - id: save-build-sstate
    #   if: always()
    #   uses: actions/cache/save@v4
    #   with:
    #     key: build-sstate
    #     path: |
    #       ${{ steps.bitbake-targets.outputs.sstate_dir }}
