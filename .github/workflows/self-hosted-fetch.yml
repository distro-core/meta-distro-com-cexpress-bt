# SPDX-License-Identifier: MIT

name: Self Hosted Fetch

run-name: ${{ github.workflow }} for ${{ github.repository }}

# This workflow represents a specific configuration for a
# single MACHINE as a specific design goal. It utilizes a
# reusable workflow found at distro-core.

# Secrets
# secrets.ACTIONS_STEP_DEBUG                Repository
# secrets.AWS_ACCESS_KEY_ID                 Organization, S3 Access Key
# secrets.AWS_SECRET_ACCESS_KEY             Organization, S3 Secret Key
# secrets.AWS_ENDPOINT_URL                  Organization, S3 Endpoint Hostname

# Self hosted runners have the prerequsite dependency to
# install the host tools dependencies before workflow use.

on:
  workflow_dispatch:
    inputs:
      runs-on:
        description: Select runner
        type: choice
        default: '["self-hosted","linux"]'
        options:
        - '["self-hosted","linux"]'
        - '["self-hosted","linux","x64"]'
        - '["self-hosted","linux","arm64"]'
      flag_dry_run:
        description: >-
          flag --dry-run
        type: boolean
        default: false
      flag_continue:
        description: >-
          flag --continue
        type: boolean
        default: false
      flag_parse_only:
        description: >-
          flag --parse-only
        type: boolean
        default: false
      flag_no_setscene:
        description: >-
          flag --no-setscene
        type: boolean
        default: false
      EXTRA_USER_CLASSES:
        description: >-
          USER_CLASSES:prepend
        type: choice
        default: none
        options:
        - none
        - cve-check

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ !contains(github.ref, 'release/') }}

# workflow permissions for current repository

permissions:
  actions: write
  attestations: write
  contents: write
  id-token: write

########################################################################

# DISTRO:
#   required: true
#   description: >-
#     bitbake variable DISTRO
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-DISTRO
# DISTRO_CODENAME:
#   required: true
#   description: >-
#     bitbake variable DISTRO_CODENAME
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-DISTRO_CODENAME
# MACHINE:
#   required: true
#   description: >-
#     bitbake variable MACHINE
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-MACHINE
# TARGETS:
#   required: true
#   description: >-
#     bitbake command line targets_list
# EXTRA_PREMIRRORS:
#   required: false
#   description: >-
#     bitbake variable PREMIRRORS:prepend
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-PREMIRRORS
# EXTRA_SSTATE_MIRRORS:
#   required: false
#   description: >-
#     bitbake variable SSTATE_MIRRORS:prepend
#     https://docs.yoctoproject.org/ref-manual/variables.html#term-SSTATE_MIRRORS

env:
  REPO_MANIFEST_URL: https://github.com/distro-core/distro-manifest.git
  REPO_MANIFEST_NAME: distro-head-scarthgap.xml
  REPO_MANIFEST_REF: main
  REPO_MANIFEST_LOCAL: >-
    <!-- <project name="meta-distro" path="meta-distro-core" revision="main" /> -->
  DISTRO: distro-core
  DISTRO_CODENAME: scarthgap
  MACHINE: com-cexpress-bt
  TARGETS: distro-image
  MNT_DL_DIR: /mnt/downloads
  MNT_SSTATE_DIR: /mnt/sstate-cache
  # replaces inherit own-mirrors
  EXTRA_PREMIRRORS: >-
    cvs://.*/.* file:///mnt/downloads
    svn://.*/.* file:///mnt/downloads
    git://.*/.* file:///mnt/downloads
    gitsm://.*/.* file:///mnt/downloads
    bzr://.*/.*  file:///mnt/downloads
    p4://.*/.* file:///mnt/downloads
    osc://.*/.* file:///mnt/downloads
    https?://.*/.* file:///mnt/downloads
    ftp://.*/.* file:///mnt/downloads
    npm://.*/?.* file:///mnt/downloads
    s3://.*/.* file:///mnt/downloads
    crate://.*/.* file:///mnt/downloads
    gs://.*/. file:///mnt/downloads
    cvs://.*/.* https://downloads.distro-core.brainhoard.com
    svn://.*/.* https://downloads.distro-core.brainhoard.com
    git://.*/.* https://downloads.distro-core.brainhoard.com
    gitsm://.*/.* https://downloads.distro-core.brainhoard.com
    bzr://.*/.*  https://downloads.distro-core.brainhoard.com
    p4://.*/.* https://downloads.distro-core.brainhoard.com
    osc://.*/.* https://downloads.distro-core.brainhoard.com
    https?://.*/.* https://downloads.distro-core.brainhoard.com
    ftp://.*/.* https://downloads.distro-core.brainhoard.com
    npm://.*/?.* https://downloads.distro-core.brainhoard.com
    s3://.*/.* https://downloads.distro-core.brainhoard.com
    crate://.*/.* https://downloads.distro-core.brainhoard.com
    gs://.*/. https://downloads.distro-core.brainhoard.com
  EXTRA_SSTATE_MIRRORS: >-
    file://.* file:///mnt/sstate-cache/PATH
    file://.* https://sstate-cache.distro-core.brainhoard.com/PATH

########################################################################

jobs:

  Run:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    timeout-minutes: 360
    steps:

    # checkout repo for workflow automation.

    - id: checkout
      uses: actions/checkout@v4
      with:
        clean: false
        fetch-depth: 1

    # setup runner.

    - id: runner
      if: env.DISTRO != '' && env.MACHINE != ''
      uses: distro-core/action-runner@main
      with:
        mnt_dl_dir: ${{ env.MNT_DL_DIR }}
        mnt_sstate_dir: ${{ env.MNT_SSTATE_DIR }}

    # keep-alive prevents the workflow from being disabled due to any
    # github repository inactivity.

    - id: keepalive
      uses: liskin/gh-workflow-keepalive@v1.2.1

    # contexts reports in the summary log contents of contexts.

    - id: context
      uses: distro-core/action-context@main

    # remove the workspace contents; self-hosted runners retain the
    # workspace artifacts between workflow executions. self-hosted
    # runners return name as label in outputs.

    # - id: pre-cleanup
    #   uses: distro-core/action-cleanup@main
    #   with:
    #     paths: |
    #       build/*.{log,lock,sock}
    #       build/conf/{.*,*}
    #       build/tmp

    # repo init, sync and manifest; the job creates the workspace
    # contents and the .repo directory that are referenced in later.
    # environment variables are set for the manifest and the repo.

    - uses: distro-core/action-repo@main

    # restore caches.

    - id: restore-build-cache
      uses: actions/cache/restore@v4
      with:
        key: build-cache
        path: |
          build/cache

    - id: restore-build-downloads
      if: steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/restore@v4
      with:
        key: build-downloads
        path: |
          build/downloads

    - id: restore-build-sstate
      if: steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/restore@v4
      with:
        key: build-sstate
        path: |
          build/sstate-cache

    # build steps to create artifacts.

    # - id: bitbake-clean
    #   uses: distro-core/action-bitbake@main
    #   with:
    #     TARGETS: ''
    #     TARGET_FLAGS: --cmd cleansstate

    # - id: bitbake-sdk
    #   uses: distro-core/action-bitbake@main
    #   with:
    #     TARGETS: ${{ env.TARGETS }}
    #     TARGET_FLAGS: --cmd populate_sdk

    - id: bitbake-targets
      uses: distro-core/action-bitbake@main
      with:
        TARGETS: ${{ env.TARGETS }}
        TARGETS_FLAGS: --runall=fetch
        FLAG_DRY_RUN: ${{ inputs.flag_dry_run && inputs.flag_dry_run || false }}
        FLAG_CONTINUE: ${{ inputs.flag_continue && inputs.flag_continue || false }}
        FLAG_PARSE_ONLY: ${{ inputs.flag_parse_only && inputs.flag_parse_only || false }}
        FLAG_NO_SETSCENE: ${{ inputs.flag_no_setscene && inputs.flag_no_setscene || false }}
        EXTRA_USER_CLASSES: ${{ inputs.EXTRA_USER_CLASSES }}

    # Artifacts attestation

    # - id: attest
    #   uses: actions/attest-build-provenance@v2
    #   with:
    #     subject-checksums: ${{ steps.bitbake-targets.outputs.deploy_dir }}

    # sync artifacts to S3 storage.

    # - id: s3sync-dl-dir
    #   uses: distro-core/action-s3sync@main
    #   with:
    #     src_dir: ${{ steps.bitbake-targets.outputs.dl_dir }}
    #     dst_dir: s3://distro-core-downloads
    #     # delete_removed: ${{ inputs.delete_removed }}
    #     AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # - id: s3sync-sstate-dir
    #   uses: distro-core/action-s3sync@main
    #   with:
    #     src_dir: ${{ steps.bitbake-targets.outputs.sstate_dir }}
    #     dst_dir: s3://distro-core-sstate-cache/${{ env.MACHINE }}
    #     # delete_removed: ${{ inputs.delete_removed }}
    #     AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # sync shared artifacts to local storage

    - id: rsync-dl-dir
      if: steps.bitbake-targets.outputs.dl_dir != '' && steps.runner.outputs.mnt_dl_dir != ''
      uses: distro-core/action-rsync@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.dl_dir }}
        dst_dir: ${{ steps.runner.outputs.mnt_dl_dir }}

    - id: rsync-sstate-dir
      if: steps.bitbake-targets.outputs.sstate_dir != '' && steps.runner.outputs.mnt_sstate_dir != ''
      uses: distro-core/action-rsync@main
      with:
        src_dir: ${{ steps.bitbake-targets.outputs.sstate_dir }}
        dst_dir: ${{ steps.runner.outputs.mnt_sstate_dir }}

    # refresh caches.

    # - id: delete-build-cache
    #   if: steps.bitbake-targets.conclusion == 'success' && steps.bitbake-targets.outputs.cache != ''
    #   shell: bash
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     : delete-build-cache
    #     gh cache delete build-cache || true

    - id: save-build-cache
      if: always() && steps.bitbake-targets.conclusion == 'success' && steps.bitbake-targets.outputs.cache != ''
      uses: actions/cache/save@v4
      with:
        key: build-cache
        path: |
          ${{ steps.bitbake-targets.outputs.cache }}/*
          !${{ steps.bitbake-targets.outputs.cache }}/bb_cache*
          !${{ steps.bitbake-targets.outputs.cache }}/bb_codeparser*

    - id: save-build-downloads
      if: always() && steps.bitbake-targets.conclusion == 'success' && steps.bitbake-targets.outputs.dl_dir != '' && steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/save@v4
      with:
        key: build-downloads
        path: |
          ${{ steps.bitbake-targets.outputs.dl_dir }}/*
          !${{ steps.bitbake-targets.outputs.dl_dir }}/git2
          !${{ steps.bitbake-targets.outputs.dl_dir }}/*.done
          !${{ steps.bitbake-targets.outputs.dl_dir }}/*.lock
          !${{ steps.bitbake-targets.outputs.dl_dir }}/*tmp
          !${{ steps.bitbake-targets.outputs.dl_dir }}/tmp*

    - id: save-build-sstate
      if: always() && steps.bitbake-targets.conclusion == 'success' && steps.bitbake-targets.outputs.sstate_dir != '' && steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/save@v4
      with:
        key: build-sstate
        path: |
          ${{ steps.bitbake-targets.outputs.sstate_dir }}
